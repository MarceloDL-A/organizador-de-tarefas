[
    {
        "title": "a",
        "is_done": false,
        "date_created": "2024-05-09 13:03:38",
        "date_modified": "2024-05-09 13:03:48",
        "notes": "Para tornar a gera\u00e7\u00e3o do HTML mais eficiente e abrir no navegador corretamente, uma abordagem alternativa pode ser usar diretamente o Pandoc ou o `markdown` para converter o Markdown para HTML. Vou usar a biblioteca `mistletoe` para converter o Markdown e depois abrir no navegador.\n\n### Solu\u00e7\u00e3o com `mistletoe` e `webbrowser`\n\n**`ui/notes.py`**\n\n```python\n# ui/notes.py\n\nimport tkinter as tk\nfrom tkinter import ttk\nfrom utils.logger import log_history\nimport webbrowser\nimport os\nimport tempfile\nfrom mistletoe import markdown\n\n\nclass NotesEditor:\n    def __init__(self, parent, task, save_tasks_callback, history_file):\n        self.task = task\n        self.save_tasks = save_tasks_callback\n        self.history_file = history_file\n\n        # Criar janela flutuante\n        self.notes_window = tk.Toplevel(parent)\n        self.notes_window.title(f\"Notes for {task.title}\")\n        self.notes_window.geometry(\"800x600\")\n\n        # Frame principal\n        main_frame = ttk.Frame(self.notes_window, padding=(10, 10))\n        main_frame.pack(fill=tk.BOTH, expand=True)\n\n        # Caixa de texto para edi\u00e7\u00e3o de anota\u00e7\u00f5es\n        self.text_editor = tk.Text(main_frame, height=10)\n        self.text_editor.grid(row=0, column=0, sticky=\"nsew\")\n        self.text_editor.insert(tk.END, task.notes)\n\n        # Bot\u00e3o para salvar e renderizar Markdown no navegador\n        render_button = ttk.Button(main_frame, text=\"Save & View\", command=self.save_and_view)\n        render_button.grid(row=1, column=0, pady=5, sticky=\"ew\")\n\n        # Ajuste das propor\u00e7\u00f5es dos elementos\n        main_frame.rowconfigure(0, weight=1)\n        main_frame.columnconfigure(0, weight=1)\n\n    def save_and_view(self):\n        # Salvar anota\u00e7\u00e3o como Markdown\n        self.task.notes = self.text_editor.get(\"1.0\", tk.END).strip()\n        self.task.update_date_modified()\n        self.save_tasks()\n        log_history(self.history_file, f\"Notes updated for {self.task.title}\")\n\n        # Converter para HTML usando mistletoe\n        rendered_markdown = markdown(self.task.notes)\n\n        # Estilos CSS para renderiza\u00e7\u00e3o\n        styles = \"\"\"\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n                line-height: 1.6;\n                color: #333;\n                padding: 10px;\n                margin: 0;\n            }\n            h1, h2, h3, h4, h5, h6 {\n                color: #2c3e50;\n                font-weight: bold;\n            }\n            pre {\n                background-color: #f4f4f4;\n                border-left: 3px solid #ccc;\n                padding: 10px;\n                overflow-x: auto;\n                font-family: Consolas, 'Courier New', monospace;\n            }\n            code {\n                background-color: #f4f4f4;\n                border-radius: 3px;\n                padding: 2px 4px;\n                font-size: 0.9em;\n                font-family: Consolas, 'Courier New', monospace;\n            }\n            ul, ol {\n                margin-left: 20px;\n            }\n            blockquote {\n                margin: 0;\n                padding-left: 10px;\n                border-left: 3px solid #ccc;\n                color: #555;\n            }\n            a {\n                color: #3498db;\n                text-decoration: none;\n            }\n            a:hover {\n                text-decoration: underline;\n            }\n        </style>\n        \"\"\"\n\n        # HTML final com estilos embutidos\n        html_content = f\"<html><head>{styles}</head><body>{rendered_markdown}</body></html>\"\n\n        # Salvar HTML em um arquivo tempor\u00e1rio\n        temp_html_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".html\")\n        with open(temp_html_file.name, \"w\", encoding=\"utf-8\") as file:\n            file.write(html_content)\n\n        # Abrir o arquivo HTML no navegador padr\u00e3o\n        webbrowser.open(f\"file://{os.path.abspath(temp_html_file.name)}\")\n```\n\n### Depend\u00eancias Necess\u00e1rias\n\nInstale a biblioteca `mistletoe`:\n\n```bash\npip install mistletoe\n```\n\n### Atualizar o Arquivo `.spec`\n\n**`TaskOrganizer.spec`**\n\n```python\n# TaskOrganizer.spec\n\n# -*- mode: python -*-\n\nblock_cipher = None\n\nfrom PyInstaller.utils.hooks import collect_submodules\n\n# Coleta todos os subm\u00f3dulos\nui_submodules = collect_submodules('ui')\nutils_submodules = collect_submodules('utils')\n\na = Analysis(\n    ['main.py'],\n    pathex=[],\n    binaries=[],\n    datas=[\n        ('models/*.py', 'models'),\n        ('ui/*.py', 'ui'),\n        ('utils/*.py', 'utils'),\n        ('tasks.json', '.'),\n        ('task_history.txt', '.'),\n    ],\n    hiddenimports=[\n        'ttkthemes',\n        'mistletoe',\n        *ui_submodules,\n        *utils_submodules\n    ],\n    hookspath=[],\n    runtime_hooks=[],\n    excludes=[],\n    win_no_prefer_redirects=False,\n    win_private_assemblies=False,\n    cipher=block_cipher,\n    noarchive=False,\n)\n\npyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    [],\n    exclude_binaries=True,\n    name='TaskOrganizer',\n    debug=False,\n    bootloader_ignore_signals=False,\n    strip=False,\n    upx=True,\n    console=False,\n    icon=None\n)\n\ncoll = COLLECT(\n    exe,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    strip=False,\n    upx=True,\n    upx_exclude=[],\n    name='TaskOrganizer'\n)\n```\n\n### Gerar o Execut\u00e1vel\n\nFinalmente, gere o execut\u00e1vel com:\n\n```bash\npyinstaller TaskOrganizer.spec\n```\n\nIsso deve resolver o problema, mas estarei aqui para apoiar com mais ajustes.",
        "subtasks": []
    }
]